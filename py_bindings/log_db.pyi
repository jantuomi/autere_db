WRITE_DURABILITY_FLUSH: int
WRITE_DURABILITY_FLUSH_SYNC: int
READ_CONSISTENCY_EVENTUAL: int
READ_CONSISTENCY_STRONG: int

VALUE_INT: int
VALUE_DECIMAL: int
VALUE_STRING: int
VALUE_BYTES: int
VALUE_NULL: int

Record = list["Value"]

class Config:
    def data_dir(self, data_dir: str) -> "Config": ...
    def segment_size(self, segment_size: int) -> "Config": ...
    def write_durability(self, write_durability: int) -> "Config": ...
    def read_consistency(self, read_consistency: int) -> "Config": ...
    def fields(self, fields: list[str]) -> "Config": ...
    def primary_key(self, primary_key: str) -> "Config": ...
    def secondary_keys(self, secondary_keys: list[str]) -> "Config": ...
    def initialize(self) -> "DB": ...

class DB:
    @staticmethod
    def configure() -> Config: ...
    def upsert(self, record: Record) -> None: ...
    def get(self, key: str) -> Record: ...
    def find_by(self, key: str, value: "Value", offset: int = ..., limit: int = ..., sort_asc: bool = ...) -> list[Record]: ...
    def batch_find_by(self, key: str, values: list["Value"], offset: int = ..., limit: int = ..., sort_asc: bool = ...) -> list[tuple[int, Record]]: ...
    def delete(self, key: str) -> list[Record]: ...
    def delete_by(self, key: str, value: "Value") -> list[Record]: ...
    def range_by(self, key: str, start: "Bound", end: "Bound", offset: int = ..., limit: int = ..., sort_asc: bool = ...) -> list[Record]: ...
    def tx_begin(self) -> None: ...
    def tx_commit(self) -> None: ...
    def tx_rollback(self) -> None: ...
    def do_maintenance_tasks(self) -> None: ...
    def refresh_indexes(self) -> None: ...

class Value:
    @staticmethod
    def int(v: int) -> "Value": ...
    @staticmethod
    def decimal(v: str) -> "Value": ...
    @staticmethod
    def string(v: str) -> "Value": ...
    @staticmethod
    def bytes(v: bytes) -> "Value": ...
    @staticmethod
    def null() -> "Value": ...

    def kind(self) -> int: ...

    def as_int(self) -> int: ...
    def as_decimal(self) -> str: ...
    def as_string(self) -> str: ...
    def as_bytes(self) -> bytes: ...
    def as_null(self) -> None: ...

class Bound:
    @staticmethod
    def unbounded() -> "Bound": ...
    @staticmethod
    def included(v: "Value") -> "Bound": ...
    @staticmethod
    def excluded(v: "Value") -> "Bound": ...
